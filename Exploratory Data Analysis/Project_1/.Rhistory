ibrary(nlme)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
View(Bodyweight)
View(Diet)
?xyplot
View(BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
download.packages("ggplot")
install.packages("ggplot2")
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
librabry(ggplot2)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies) + geom_smooth()
View(Movies)
View(movies)
download.packages("R.utils")
gwtwd()
getwd()
download.packages("R.utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("rpub")
getwd()
library(datasets)
data(iris)
View(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
virgin<-subset(iris,iris$Species=='virginica')
View(virgin)
nrows(virgin)
nrow(virgin)
?subset
virgin<-subset(iris,iris$Species=='virginica',select = c(Sepal.Length,Species))
View(virgin)
tapply(virgin,virgin$species=='virginca',mean)
tapply(virgin,virgin$species=='virginica',mean)
tapply(virgin,virgin$Species=='virginica',mean)
tapply(virgin,virgin$Species,mean)
tapply(virgin$Sepal.Lenght,virgin$Species,mean)
View(virgin)
?tapply
virgin<-subset(iris,iris$Species=='virginica'|iris$Species=='setosa',select = c(Sepal.Length,Species))
view(virgin)
View(virgin)
tapply(virgin$Sepal.Lenght,virgin$Species,mean)
tapply(iris$Sepal.Lenght,iris$Species,mean)
use(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(iris$Sepal.Lenght,iris$Species,mean)
View(iris)
tapply(iris$Sepal.Lenght,iris$Species=='virginica',mean)
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species=='virginica',mean)
tapply(iris$Sepal.Lenght,iris$Species,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
View(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
swirl()
library(swirl())
rm(list=ls())
swirl()
5+7
x<-5+
7
c
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(555,z)
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrrt
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
quit()
library(swirl())
swirl()
1:20
pi:20
info()
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=3-)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
my_seq
length(my_seq)
I:length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq(my_seq)
seq_along(my_seq)
rep(0,times = 40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect >=6
my_char<-c("My","name","is")
my_char
paste(my_char , collapse = " ")
my_name<-c(my_char,"Krish")
my_name
paste(my_paste,collapse = " "!)
paste(my_paste,collapse = " ")
paste(my_name,collapse = " ")
paste("Hello","world!",sep = " ")
paste(1:3,c("x","y","z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
X*3
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_na)
my_na<-is.na(my_data)
my_na
my_data == Na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
bye()
swirl
swirl()
x
x[1:10]
x[is.na(x)]
X[!is.na(x)]
X[!is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,4,5,7)]
x[c(3,5,7)]
x[c(0)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,5)]
x[-c(2,10)]
vect <- c(foo = 11,bar =2 ,norf = Na)
vect <- c(foo = 11,bar =2 ,norf = NA)
vect
names(vect)
c(11,2,NA)
c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2) <-c("foo","bar","norf"")
names(vect2) <-c("foo","bar","norf"")
c("x")
names(vect2) <- c("foo", "bar", "norf")
identical(vect1,vect2)
main()
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vectore<-1:20
my_vector<-1:20
my_vector
dim(my_vectore)
dim(my_vector)
length(my_vectore)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vectore)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vectore)
class(my_vector)
info()
nxt()
my_matrix<-my_vectore
my_matrix<-my_vector
?matric
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
librabry(swirl)
library(swirl)
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
!5==7
FALSE & FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <_sample(10)
ints <-sample(10)
ints
ints>5
which(ints>7)
any(ints>0)
any(ints<0)
all(ints>0)
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list,class
)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(range,flag_shapes)
lapply(range,range)
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique())
skip()
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
View(sapply(class))
View(sapply(flags,class))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
tables(flags["landmass"])
table(flags["landmass"])
table(flags$animate)
play()
?table
nxt()
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,
| flags$red, summary)
tapply(flags$population |,flags$red, summary)
tapply(flags$population ,flags$red, summary)
summary(flags$population,flags$landmass,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
View(head(plants))
View(Summary(plants))
View(summary(plants))
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
View(str(plants))
View(str(plants))
bye
main()
library(swirl)
swirl()
View(students2)
View(students3)
?gather
submit()
main()
info()
skip()
play()
?gather
View(students)
gather(students,sex,count,male:female)
gather(students,sex,count,male,female)
nxt()
?spread
submit()
submit()
skip()
extract_numeric("class5")
skip()
students4
submit()
skip()
skip()
View(students4)
skip()
passed
failed
skip()
skip()
skip()
sat
skip()
skip()
library(swirl)
rm(list=ls())
swirl()
setwd("C:/Users/Krish/OneDrive/coursera/backup/Exploratory_Analysis/Project/Project_1")
?read.csv
data_full <- read.csv("./Data/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
View(head(data_full))
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
View(head(data_full))
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
View(head(data))
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
View(head(data))
?hist
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
table(data$Global_active_power)
?hist
library(knitr)
getwd()
knit2html("plot1.rmd")
?plot
plot(data$Global_active_power~data$Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
?with
with(data, {
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
knit2html("project1.rmd")
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
rep(1:4,each=3)
